/// 1: class Fraction {
/// 2:     field int numerator, denominator;
/// 3:     
/// 4:     constructor Fraction new (int num, int den){
/// 5:         let numerator=num;
function Fraction.new 0 // 0
push constant 2         // 1
call Memory.alloc 1     // 2
pop pointer 0           // 3
push argument 0         // 4
pop this 0              // 5
/// 6:         let denominator=den;
push argument 1         // 6
pop this 1              // 7
/// 7:         do reduce();
push pointer 0          // 8
call Fraction.reduce 1  // 9
pop temp 0              // 10
/// 8:         return this;
push pointer 0          // 11
return                  // 12
/// 9:     }
/// 10: 
/// 11:     function int gcd (int a, int b){
/// 12:         var int r;
/// 13:         while (~(b=0)) {
function Fraction.gcd 1 // 0
label L1
push argument 1         // 1
push constant 0         // 2
eq                      // 3
not                     // 4
if-goto L2              // 5
goto L3                 // 6
label L2
/// 14:             let r = a - (b * (a / b));
push argument 0         // 7
push argument 1         // 8
push argument 0         // 9
push argument 1         // 10
call Math.divide 2      // 11
call Math.multiply 2    // 12
sub                     // 13
pop local 0             // 14
/// 15:             let a = b;
push argument 1         // 15
pop argument 0          // 16
/// 16:             let b = r;
push local 0            // 17
pop argument 1          // 18
/// 17:         }
goto L1                 // 19
label L3
/// 18:         return a;
push argument 0         // 20
return                  // 21
/// 19:     }
/// 20: 
/// 21:     method void reduce() {
/// 22:         var int g;
/// 23:         let g = Fraction.gcd(numerator, denominator);
function Fraction.reduce 1      // 0
push argument 0         // 1
pop pointer 0           // 2
push this 0             // 3
push this 1             // 4
call Fraction.gcd 2     // 5
pop local 0             // 6
/// 24:         if (g > 1){
push local 0            // 7
push constant 1         // 8
gt                      // 9
if-goto L4              // 10
goto L5                 // 11
label L4
/// 25:             let numerator = numerator / g;
push this 0             // 12
push local 0            // 13
call Math.divide 2      // 14
pop this 0              // 15
/// 26:             let denominator = denominator / g;
push this 1             // 16
push local 0            // 17
call Math.divide 2      // 18
pop this 1              // 19
/// 27:         }
/// 28:         return;
label L5
push constant 0         // 20
return                  // 21
/// 29:     }
/// 30:     
/// 31:     method Fraction plus(Fraction other, int c) {
/// 32:         var int sum;
/// 33:         let sum = c * denominator * other.getDenominator() + (numerator * other.getDenominator()) + (other.getNumerator() * denominator);
function Fraction.plus 1
push argument 0        //0
pop pointer 0          //1
push argument 2        //2
push this 1            //3
call Math.multiply 2    //4
push argument 1         //5
call Fraction.getDenominator 1  //6
call Math.multiply 2           //7
push this 0                    //8
push argument 1                //9
call Fraction.getDenominator 1 //10
call Math.multiply 2           //11
add                            //12
push argument 1                //13
call Fraction.getNumerator 1   //14
push this 1                    //15
call Math.multiply 2           //16
add                            //17
pop local 0                    //18
/// 34:         return Fraction.new(sum, denominator * other.getDenominator());
push local 0            // 19
push this 1             // 20
push argument 1         // 21
call Fraction.getDenominator 1  // 22
call Math.multiply 2    // 23
call Fraction.new 2     // 24
return                  // 25
/// 35:     }
/// 36:     
/// 37:     method int getNumerator() { return numerator; }
function Fraction.getNumerator 0        // 0
push argument 0         // 1
pop pointer 0           // 2
push this 0             // 3
return                  // 4
/// 38:     method int getDenominator() {return denominator; }
function Fraction.getDenominator 0      // 0
push argument 0         // 1
pop pointer 0           // 2
push this 1             // 3
return                  // 4
/// 39: 
/// 40:     method void print() {
/// 41:         do Output.printInt(numerator);
function Fraction.print 0       // 0
push argument 0         // 1
pop pointer 0           // 2
push this 0             // 3
call Output.printInt 1  // 4
pop temp 0              // 5
/// 42:         do Output.printString("/");
push constant 1         // 6
call String.new 1       // 7
push constant 47        // 8
call String.appendChar 2        // 9
call Output.printString 1       // 10
pop temp 0              // 11
/// 43:         do Output.printInt(denominator);
push this 1             // 12
call Output.printInt 1  // 13
pop temp 0              // 14
/// 44:         return;
push constant 0         // 15
return                  // 16
/// 45:     }
/// 46: } 
